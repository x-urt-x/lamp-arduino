#ifndef GAMMA_H
#define GAMMA_H

// in - fp 8.0
// out - fp 8.8
const uint16_t LUTInvGamma[256] = {
	0x0000, 0x0004, 0x000d, 0x001b, 0x002d, 0x0043, 0x005c, 0x0079,
	0x0099, 0x00bc, 0x00e2, 0x010b, 0x0136, 0x0165, 0x0196, 0x01cb,
	0x0202, 0x023b, 0x0277, 0x02b6, 0x02f7, 0x033a, 0x0381, 0x03c9,
	0x0414, 0x0461, 0x04b1, 0x0503, 0x0557, 0x05ae, 0x0607, 0x0662,
	0x06bf, 0x071f, 0x0781, 0x07e4, 0x084b, 0x08b3, 0x091d, 0x098a,
	0x09f8, 0x0a69, 0x0adc, 0x0b51, 0x0bc8, 0x0c41, 0x0cbc, 0x0d39,
	0x0db8, 0x0e39, 0x0ebc, 0x0f41, 0x0fc8, 0x1051, 0x10db, 0x1168,
	0x11f7, 0x1288, 0x131a, 0x13af, 0x1445, 0x14dd, 0x1578, 0x1614,
	0x16b2, 0x1751, 0x17f3, 0x1897, 0x193c, 0x19e3, 0x1a8c, 0x1b37,
	0x1be3, 0x1c92, 0x1d42, 0x1df4, 0x1ea8, 0x1f5e, 0x2015, 0x20ce,
	0x2189, 0x2246, 0x2304, 0x23c4, 0x2486, 0x254a, 0x260f, 0x26d6,
	0x279f, 0x286a, 0x2936, 0x2a04, 0x2ad4, 0x2ba5, 0x2c78, 0x2d4d,
	0x2e24, 0x2efc, 0x2fd6, 0x30b1, 0x318e, 0x326d, 0x334e, 0x3430,
	0x3514, 0x35f9, 0x36e0, 0x37c9, 0x38b3, 0x399f, 0x3a8d, 0x3b7c,
	0x3c6d, 0x3d60, 0x3e54, 0x3f4a, 0x4041, 0x413a, 0x4234, 0x4331,
	0x442e, 0x452e, 0x462f, 0x4731, 0x4835, 0x493b, 0x4a42, 0x4b4b,
	0x4c55, 0x4d61, 0x4e6f, 0x4f7e, 0x508e, 0x51a1, 0x52b4, 0x53ca,
	0x54e0, 0x55f9, 0x5713, 0x582e, 0x594b, 0x5a6a, 0x5b8a, 0x5cab,
	0x5dce, 0x5ef3, 0x6019, 0x6141, 0x626a, 0x6394, 0x64c1, 0x65ee,
	0x671d, 0x684e, 0x6980, 0x6ab4, 0x6be9, 0x6d20, 0x6e58, 0x6f91,
	0x70cd, 0x7209, 0x7347, 0x7487, 0x75c8, 0x770a, 0x784e, 0x7994,
	0x7ada, 0x7c23, 0x7d6d, 0x7eb8, 0x8005, 0x8153, 0x82a2, 0x83f3,
	0x8546, 0x869a, 0x87ef, 0x8946, 0x8a9e, 0x8bf8, 0x8d53, 0x8eb0,
	0x900e, 0x916d, 0x92ce, 0x9431, 0x9594, 0x96f9, 0x9860, 0x99c8,
	0x9b31, 0x9c9c, 0x9e08, 0x9f76, 0xa0e5, 0xa256, 0xa3c7, 0xa53b,
	0xa6af, 0xa826, 0xa99d, 0xab16, 0xac90, 0xae0c, 0xaf89, 0xb107,
	0xb287, 0xb408, 0xb58b, 0xb70f, 0xb894, 0xba1b, 0xbba3, 0xbd2d,
	0xbeb7, 0xc044, 0xc1d1, 0xc360, 0xc4f1, 0xc682, 0xc816, 0xc9aa,
	0xcb40, 0xccd7, 0xce70, 0xd009, 0xd1a5, 0xd341, 0xd4df, 0xd67f,
	0xd81f, 0xd9c1, 0xdb65, 0xdd09, 0xdeaf, 0xe057, 0xe1ff, 0xe3aa,
	0xe555, 0xe702, 0xe8b0, 0xea5f, 0xec10, 0xedc2, 0xef76, 0xf12a,
	0xf2e0, 0xf498, 0xf650, 0xf80b, 0xf9c6, 0xfb83, 0xfd41, 0xff00
};

// in - fp 8.0
// out - fp 8.8
const uint16_t LUTGamma[256] = {
	0x0000, 0x0ac0, 0x0ff9, 0x1423, 0x17bc, 0x1af7, 0x1ded, 0x20ae,
	0x2346, 0x25ba, 0x2812, 0x2a50, 0x2c78, 0x2e8d, 0x3090, 0x3284,
	0x346a, 0x3643, 0x3810, 0x39d2, 0x3b8b, 0x3d3a, 0x3ee0, 0x407e,
	0x4214, 0x43a4, 0x452c, 0x46ae, 0x482a, 0x49a0, 0x4b11, 0x4c7c,
	0x4de3, 0x4f45, 0x50a2, 0x51fa, 0x534f, 0x54a0, 0x55ec, 0x5735,
	0x587a, 0x59bc, 0x5afb, 0x5c36, 0x5d6e, 0x5ea3, 0x5fd6, 0x6105,
	0x6232, 0x635c, 0x6483, 0x65a8, 0x66ca, 0x67ea, 0x6908, 0x6a23,
	0x6b3c, 0x6c53, 0x6d68, 0x6e7b, 0x6f8c, 0x709b, 0x71a8, 0x72b4,
	0x73bd, 0x74c5, 0x75cb, 0x76cf, 0x77d1, 0x78d2, 0x79d2, 0x7ad0,
	0x7bcc, 0x7cc7, 0x7dc0, 0x7eb8, 0x7fae, 0x80a3, 0x8197, 0x8289,
	0x837a, 0x846a, 0x8559, 0x8646, 0x8732, 0x881d, 0x8907, 0x89ef,
	0x8ad6, 0x8bbd, 0x8ca2, 0x8d86, 0x8e69, 0x8f4b, 0x902c, 0x910b,
	0x91ea, 0x92c8, 0x93a5, 0x9481, 0x955c, 0x9636, 0x970f, 0x97e7,
	0x98bf, 0x9995, 0x9a6a, 0x9b3f, 0x9c13, 0x9ce6, 0x9db8, 0x9e89,
	0x9f5a, 0xa02a, 0xa0f9, 0xa1c7, 0xa294, 0xa361, 0xa42d, 0xa4f8,
	0xa5c2, 0xa68c, 0xa755, 0xa81d, 0xa8e5, 0xa9ac, 0xaa72, 0xab38,
	0xabfd, 0xacc1, 0xad84, 0xae47, 0xaf0a, 0xafcb, 0xb08c, 0xb14d,
	0xb20d, 0xb2cc, 0xb38a, 0xb448, 0xb506, 0xb5c3, 0xb67f, 0xb73b,
	0xb7f6, 0xb8b0, 0xb96b, 0xba24, 0xbadd, 0xbb95, 0xbc4d, 0xbd05,
	0xbdbc, 0xbe72, 0xbf28, 0xbfdd, 0xc092, 0xc146, 0xc1fa, 0xc2ad,
	0xc360, 0xc413, 0xc4c5, 0xc576, 0xc627, 0xc6d8, 0xc788, 0xc837,
	0xc8e6, 0xc995, 0xca43, 0xcaf1, 0xcb9f, 0xcc4c, 0xccf8, 0xcda4,
	0xce50, 0xcefb, 0xcfa6, 0xd050, 0xd0fa, 0xd1a4, 0xd24d, 0xd2f6,
	0xd39f, 0xd447, 0xd4ee, 0xd596, 0xd63d, 0xd6e3, 0xd789, 0xd82f,
	0xd8d4, 0xd979, 0xda1e, 0xdac2, 0xdb66, 0xdc0a, 0xdcad, 0xdd50,
	0xddf2, 0xde95, 0xdf36, 0xdfd8, 0xe079, 0xe11a, 0xe1ba, 0xe25a,
	0xe2fa, 0xe39a, 0xe439, 0xe4d8, 0xe576, 0xe614, 0xe6b2, 0xe750,
	0xe7ed, 0xe88a, 0xe926, 0xe9c3, 0xea5f, 0xeafa, 0xeb96, 0xec31,
	0xeccc, 0xed66, 0xee00, 0xee9a, 0xef34, 0xefcd, 0xf066, 0xf0ff,
	0xf197, 0xf230, 0xf2c8, 0xf35f, 0xf3f7, 0xf48e, 0xf524, 0xf5bb,
	0xf651, 0xf6e7, 0xf77d, 0xf812, 0xf8a8, 0xf93d, 0xf9d1, 0xfa66,
	0xfafa, 0xfb8e, 0xfc21, 0xfcb5, 0xfd48, 0xfddb, 0xfe6e, 0xff00
};

// down_pos - fp 8.0
// coef - fp 0.16
// res - fp 8.16
inline uint lerpGamma(byte down_pos, uint16_t coef)
{
	if (down_pos == 255) return LUTGamma[255];
	uint res = ((LUTGamma[down_pos + 1] - LUTGamma[down_pos]) * coef) >> 8;
	LOG_USB_BR("| |pos= %d coef= 0.%d res= %d.%04d|/| ", down_pos, ((coef & 0xFFFF) * 10000L) >> 16, (res >> 16), ((res & 0xFFFF) * 10000L) >> 16);
	return res;
}

// down_pos - fp 8.0
// coef - fp 0.16
// res - fp 8.16
inline uint lerpInvGamma(byte down_pos, uint16_t coef)
{
	if (down_pos == 255) return LUTInvGamma[255];
	uint res = ((LUTInvGamma[down_pos + 1] - LUTInvGamma[down_pos]) * coef) >> 8;
	LOG_USB_BR("|i|pos= %d coef= 0.%d res= %d.%04d|/| ", down_pos, ((coef & 0xFFFF) * 10000L) >> 16, (res >> 16), ((res & 0xFFFF) * 10000L) >> 16);
	return res;
}
#endif